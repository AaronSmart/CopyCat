<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/data/jpa
        http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">


    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">

        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="${druid.initialSize}"/>
        <!-- 连接池最大使用连接数量 -->
        <property name="maxActive" value="${druid.maxActive}"/>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${druid.minIdle}"/>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="${druid.maxWait}"/>

        <property name="validationQuery">
            <value>${druid.validationQuery}</value>
        </property>
        <property name="testOnBorrow" value="${druid.testOnBorrow}"/>
        <property name="testOnReturn" value="${druid.testOnReturn}"/>
        <property name="testWhileIdle" value="${druid.testWhileIdle}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}"/>

        <!-- 打开removeAbandoned功能 -->
        <!--<property name="removeAbandoned" value="${druid.removeAbandoned}" />-->
        <!--&lt;!&ndash; 1800秒，也就是30分钟 &ndash;&gt;-->
        <!--<property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}"" />-->
        <!--&lt;!&ndash; 关闭abanded连接时输出错误日志 &ndash;&gt;-->
        <!--<property name="logAbandoned" value="${druid.logAbandoned}" />-->
        <!--打开语句缓存-->
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}"/>
        <!-- 监控数据库 -->
        <property name="filters" value="${druid.filters}"/>
    </bean>

    <!-- 配置druid监控spring jdbc -->
    <!--<bean gridId="druid-stat-interceptor"-->
    <!--class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">-->
    <!--</bean>-->
    <!--<bean gridId="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"-->
    <!--scope="prototype">-->
    <!--<property name="patterns">-->
    <!--<list>-->
    <!--<value>net.evecom.ptgsmp.dao</value>-->
    <!--</list>-->
    <!--</property>-->
    <!--</bean>-->
    <!--<aop:config>-->
    <!--<aop:advisor advice-ref="druid-stat-interceptor"-->
    <!--pointcut-ref="druid-stat-pointcut" />-->
    <!--</aop:config>-->

    <!-- EntityManagerFactory取代Hibernate的sessionFactory -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan">
            <list>
                <value>net.evecom.gsmp.gidcms.geography.entity</value>
            </list>
        </property>
        <property name="jpaVendorAdapter" ref="jpaVendorAdapter"></property>
        <property name="jpaDialect" ref="jpaDialect"/>
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <!--<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>-->
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                <!--二级缓存，ehcache-->
                <prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
                <prop key="hibernate.cache.provider_configuration">${hibernate.cache.provider_configuration_file_resource_path}</prop>
                <prop key="javax.persistence.sharedCache.mode">ENABLE_SELECTIVE</prop>
                <prop key="hibernate.generate_statistics">${hibernate.generate_statistics}</prop>
                <prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
                <prop key="hibernate.cache.provider_configuration_file_resource_path">${hibernate.cache.provider_configuration_file_resource_path}</prop>
                <!--查询缓存-->
                <prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
                <!--hibernate xml配置文件映射-->
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
            </props>
        </property>
    </bean>

    <bean id="jpaDialect" class="org.springframework.orm.jpa.vendor.HibernateJpaDialect"/>
    <bean id="jpaVendorAdapter"
          class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
        <property name="generateDdl" value="false"/>
        <property name="database" value="ORACLE"/>
    </bean>

    <!-- 配置事务增强处理Bean，指定事务管理器，已取代Hibernate的事务管理 -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <!-- 启动注解事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- spring ddetailjpa jpa 扫描的包-->
    <jpa:repositories base-package="net.evecom.gsmp.gidcms.geography.dao"/>
    <!--<jpa:auditing auditor-aware-ref="auditorProvider" set-dates="true"/>-->

    <!--<bean id="auditorProvider" class="net.evecom.gsmp.gidcms.geography.common.awares.UserAuditorAware"/>-->
</beans>